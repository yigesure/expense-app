-- 密码条目表
CREATE TABLE PasswordEntry (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    username TEXT,
    password TEXT NOT NULL,
    website TEXT,
    notes TEXT,
    category TEXT NOT NULL DEFAULT 'login',
    icon_url TEXT,
    created_at INTEGER NOT NULL,
    updated_at INTEGER NOT NULL,
    last_used_at INTEGER,
    is_favorite INTEGER NOT NULL DEFAULT 0,
    tags TEXT,
    custom_fields TEXT
);

-- 安全设置表
CREATE TABLE SecuritySettings (
    id INTEGER PRIMARY KEY DEFAULT 1,
    master_password_hash TEXT NOT NULL,
    salt TEXT NOT NULL,
    biometric_enabled INTEGER NOT NULL DEFAULT 0,
    auto_lock_timeout INTEGER NOT NULL DEFAULT 300,
    failed_attempts INTEGER NOT NULL DEFAULT 0,
    last_unlock_time INTEGER,
    encryption_key_id TEXT NOT NULL
);

-- 同步记录表
CREATE TABLE SyncRecord (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    entry_id INTEGER NOT NULL,
    action TEXT NOT NULL, -- 'create', 'update', 'delete'
    timestamp INTEGER NOT NULL,
    synced INTEGER NOT NULL DEFAULT 0,
    device_id TEXT NOT NULL,
    FOREIGN KEY (entry_id) REFERENCES PasswordEntry(id) ON DELETE CASCADE
);

-- 审计日志表
CREATE TABLE AuditLog (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    action TEXT NOT NULL,
    entry_id INTEGER,
    timestamp INTEGER NOT NULL,
    device_info TEXT,
    ip_address TEXT,
    success INTEGER NOT NULL DEFAULT 1
);

-- 密码强度分析表
CREATE TABLE PasswordAnalysis (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    entry_id INTEGER NOT NULL,
    strength_score INTEGER NOT NULL,
    has_uppercase INTEGER NOT NULL DEFAULT 0,
    has_lowercase INTEGER NOT NULL DEFAULT 0,
    has_numbers INTEGER NOT NULL DEFAULT 0,
    has_symbols INTEGER NOT NULL DEFAULT 0,
    length INTEGER NOT NULL,
    is_common INTEGER NOT NULL DEFAULT 0,
    is_reused INTEGER NOT NULL DEFAULT 0,
    breach_count INTEGER NOT NULL DEFAULT 0,
    last_analyzed INTEGER NOT NULL,
    FOREIGN KEY (entry_id) REFERENCES PasswordEntry(id) ON DELETE CASCADE
);

-- 查询所有密码条目
selectAllPasswords:
SELECT * FROM PasswordEntry ORDER BY updated_at DESC;

-- 根据分类查询密码条目
selectPasswordsByCategory:
SELECT * FROM PasswordEntry WHERE category = ? ORDER BY updated_at DESC;

-- 搜索密码条目
searchPasswords:
SELECT * FROM PasswordEntry 
WHERE title LIKE '%' || ? || '%' 
   OR username LIKE '%' || ? || '%' 
   OR website LIKE '%' || ? || '%'
ORDER BY updated_at DESC;

-- 根据ID查询密码条目
selectPasswordById:
SELECT * FROM PasswordEntry WHERE id = ?;

-- 插入新密码条目
insertPassword:
INSERT INTO PasswordEntry (
    title, username, password, website, notes, category, 
    icon_url, created_at, updated_at, is_favorite, tags, custom_fields
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

-- 更新密码条目
updatePassword:
UPDATE PasswordEntry SET 
    title = ?, username = ?, password = ?, website = ?, 
    notes = ?, category = ?, icon_url = ?, updated_at = ?, 
    is_favorite = ?, tags = ?, custom_fields = ?
WHERE id = ?;

-- 删除密码条目
deletePassword:
DELETE FROM PasswordEntry WHERE id = ?;

-- 更新最后使用时间
updateLastUsedTime:
UPDATE PasswordEntry SET last_used_at = ? WHERE id = ?;

-- 获取收藏的密码条目
selectFavoritePasswords:
SELECT * FROM PasswordEntry WHERE is_favorite = 1 ORDER BY updated_at DESC;

-- 获取安全设置
selectSecuritySettings:
SELECT * FROM SecuritySettings WHERE id = 1;

-- 插入或更新安全设置
insertOrUpdateSecuritySettings:
INSERT OR REPLACE INTO SecuritySettings (
    id, master_password_hash, salt, biometric_enabled, 
    auto_lock_timeout, failed_attempts, last_unlock_time, encryption_key_id
) VALUES (1, ?, ?, ?, ?, ?, ?, ?);

-- 更新失败尝试次数
updateFailedAttempts:
UPDATE SecuritySettings SET failed_attempts = ? WHERE id = 1;

-- 重置失败尝试次数
resetFailedAttempts:
UPDATE SecuritySettings SET failed_attempts = 0, last_unlock_time = ? WHERE id = 1;

-- 插入同步记录
insertSyncRecord:
INSERT INTO SyncRecord (entry_id, action, timestamp, device_id) 
VALUES (?, ?, ?, ?);

-- 获取未同步的记录
selectUnsyncedRecords:
SELECT * FROM SyncRecord WHERE synced = 0 ORDER BY timestamp ASC;

-- 标记记录为已同步
markRecordSynced:
UPDATE SyncRecord SET synced = 1 WHERE id = ?;

-- 插入审计日志
insertAuditLog:
INSERT INTO AuditLog (action, entry_id, timestamp, device_info, ip_address, success) 
VALUES (?, ?, ?, ?, ?, ?);

-- 获取审计日志
selectAuditLogs:
SELECT * FROM AuditLog ORDER BY timestamp DESC LIMIT ?;

-- 插入或更新密码分析
insertOrUpdatePasswordAnalysis:
INSERT OR REPLACE INTO PasswordAnalysis (
    entry_id, strength_score, has_uppercase, has_lowercase, 
    has_numbers, has_symbols, length, is_common, is_reused, 
    breach_count, last_analyzed
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

-- 获取密码分析
selectPasswordAnalysis:
SELECT * FROM PasswordAnalysis WHERE entry_id = ?;

-- 获取弱密码条目
selectWeakPasswords:
SELECT pe.*, pa.strength_score 
FROM PasswordEntry pe 
JOIN PasswordAnalysis pa ON pe.id = pa.entry_id 
WHERE pa.strength_score < 60 
ORDER BY pa.strength_score ASC;

-- 获取重复使用的密码
selectReusedPasswords:
SELECT pe.*, pa.is_reused 
FROM PasswordEntry pe 
JOIN PasswordAnalysis pa ON pe.id = pa.entry_id 
WHERE pa.is_reused = 1 
ORDER BY pe.updated_at DESC;

-- 获取可能泄露的密码
selectBreachedPasswords:
SELECT pe.*, pa.breach_count 
FROM PasswordEntry pe 
JOIN PasswordAnalysis pa ON pe.id = pa.entry_id 
WHERE pa.breach_count > 0 
ORDER BY pa.breach_count DESC;

-- 统计各分类密码数量
countPasswordsByCategory:
SELECT category, COUNT(*) as count 
FROM PasswordEntry 
GROUP BY category;

-- 获取密码强度统计
selectPasswordStrengthStats:
SELECT 
    COUNT(CASE WHEN pa.strength_score >= 80 THEN 1 END) as strong_count,
    COUNT(CASE WHEN pa.strength_score >= 60 AND pa.strength_score < 80 THEN 1 END) as medium_count,
    COUNT(CASE WHEN pa.strength_score < 60 THEN 1 END) as weak_count,
    COUNT(*) as total_count
FROM PasswordEntry pe 
LEFT JOIN PasswordAnalysis pa ON pe.id = pa.entry_id;